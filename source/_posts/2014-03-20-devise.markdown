---
layout: post
title: "Devise, Read its Documentation, Then Conquer"
date: 2014-03-20 15:15:59 -0400
comments: false
categories: "Devise Authentication Security Ruby"
---

This past weekend I implemented devise with my partner for a project we were working on.  The project was going well but for our rails app we wanted to use sessions to build out functionality. It felt like the logical step once we hit a wall with the back end and didn’t know where else to go.  A fellow student recommended the gem Devise.  We were hesitant but it sounded like the easiest way to implement sessions, which we had no experience doing in Rails.

So we found a Rail’s Girls Guide on Devise, skipped to the part to where we implemented it and took off from there.  Within two minutes we had successfully installed Devise and broke everything in our app.  It was so simple though!

We had added Devise to our gem files, ran ```bundle install``` in our shell and then to actually install Devise in our application we ran ```rails g devise:install```  We wanted our users to have sessions so we added
``` ruby
config.action_mailer.default_url_options = { :host => 'localhost:3000' }
```
to our development.rb file in the config/environment directory.  Then we ran the two commands that really broke everything ```rails g devise user ``` and ```rake db:migrate``` (in that order).  At the time we were at such a loss as to why the forms we had made weren’t being used anymore, why we had new, unexpected routes, how our controller was being glossed over, and why we couldn’t see any of those things in our code.

While overall, I was happy about using Devise, this was one of the things that annoyed me about the gem.  Devise is huge, which it has to be to provide the security features it sets up, however Devise tries to hide its hugeness from you.  While hiding some of its magic on how it works is fine, not showing a developer the new views it uses by default is not.  At this point in the night however we called it a day and went home.

The next morning I sat down and was determined to get Devise to work.  I started out where we should have, at Devise’s documentation.  The documentation is good and straight forward.  First thing I did was run ```rails generate devise:views``` so that I could actually work our forms into Devise.  Next to make our code work I added this code below to our parameters.
``` ruby
def configure_permitted_parameters
  devise_parameter_sanitizer.for(:sign_up) << :first_name <<:etc
end
```
I found trying to get Devise’s controller to switch back to our own to be too difficult, and I realized I needed to work with devise rather than against it.  And with Devise I could do this awesome code to our site’s navbar.
``` ruby
<% if current_user %>
  <%= link_to 'Home', user_path(current_user), class: 'navbar-brand' %>
  <%= link_to 'Settings', edit_user_registration_path, class: 'navbar-brand' %>
  <%= link_to "Logout", destroy_user_session_path, method: :delete, class: 'navbar-brand', id: 'logout-id' %>
<% else %>
  <%= link_to "Login", "/users/sign_in", class: 'navbar-brand' %>
<% end %>
```

This current_user method let’s make a page layout responsive to logged in user, or someone just visiting our page.  It adds great functionality to the site and simple to expand on.

So remember, before you implement any code in whatever language, be sure to read its documentation.

