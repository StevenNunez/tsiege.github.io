<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ready or Blog Here I Code]]></title>
  <link href="http://TSiege.github.io/atom.xml" rel="self"/>
  <link href="http://TSiege.github.io/"/>
  <updated>2014-09-05T16:22:23-04:00</updated>
  <id>http://TSiege.github.io/</id>
  <author>
    <name><![CDATA[Tristan Siegel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips, Tricks, and Advice for installing ChrUbuntu on an Acer C720]]></title>
    <link href="http://TSiege.github.io/blog/2014/09/04/chrubuntu/"/>
    <updated>2014-09-04T14:38:49-04:00</updated>
    <id>http://TSiege.github.io/blog/2014/09/04/chrubuntu</id>
    <content type="html"><![CDATA[<h2>Some of this may even be useful for other models!!!</h2>

<p>For the past couple of weeks my job has had me working on an internal project to create a shell script for installing Ubuntu with a completely furnished development environment for the Acer C720 Chromebooks.  That meant that each computer would need Ruby, RVM, Postgres, Sublime, Github credentials, customized bashrc, and whatever else we could think of.</p>

<p>I started with <a href="https://github.com/codestarterorg/ubuntu-chromebook-installer">this awesome install script</a> by <a href="https://codestarter.org/">Codestarter</a>, which was a great basis since many of the largest hurdles were well hurdled.  I&rsquo;ve also played around witht Jay Lee&rsquo;s <a href="http://chromeos-cr48.blogspot.ca/">install script</a>, the guy who created ChrUbuntu.  And this blog post is the result of such tinkering.</p>

<h2>Tips</h2>

<h3>Helpful Resources:</h3>

<ul>
<li>Reddit&rsquo;s <a href="http://www.reddit.com/r/chrubuntu/">ChrUbuntu Thread</a>
Lot&rsquo;s of answers to common problems as well as general advice.</li>
<li>Ask Ubuntu&rsquo;s <a href="http://askubuntu.com/questions/tagged/chromebook">Chromebook Section</a>
Ask Ubuntu is Stack Exchange&rsquo;s site devoted to all things Ubuntu, so it&rsquo;s it great resource if you have general Ubuntu questions too.</li>
<li>Jay Lee&rsquo;s <a href="http://chromeos-cr48.blogspot.ca/">Chromebook Blog</a>
While it hasn&rsquo;t been active for about a year, it is still the website of the guy who made ChrUbuntu, so reading some posts give you a better grounding about ChrUbuntu.</li>
<li>Google&rsquo;s <a href="https://support.google.com/chromebook/answer/1080595?hl=en">Chromebook Support site</a>
This website has a lot of helpful information about trouble shooting Chrome OS.
<strong>NOTE</strong> The Chrome OS Recovery tool on this, at least for Macs, is <strong>outdated</strong>.
See below for more information.  You <strong>MUST</strong> use this <a href="https://chrome.google.com/webstore/detail/chromebook-recovery-utili/jndclpdbaamdhonoechobihbbiimdgai?hl=en">version</a> of the recovery utility.</li>
</ul>


<h4>Need more SSD space?</h4>

<p>This <a href="http://www.androidcentral.com/how-upgrade-ssd-your-acer-c720-chromebook">guide</a> to upgrading the SSD on an Acer C720. Fair warning, I haven&rsquo;t done this myself yet. But I&rsquo;ve read through it. It seems easy, and the page&rsquo;s comments echo this sentiment.</p>

<h2>Tricks</h2>

<h4>Default booting into Chrubuntu:</h4>

<p>  <strong>NOTE</strong> This should only be done after you have completely installed Ubuntu and must be reverted if you intend on reformatting the computer.  It can also <em>only</em> be done if you have removed your write protect screw in order to change the SeaBIOS.
  <strong>NOTE</strong> Doing this will void the warranty on the computer and potentionally brick the computer.  <strong>I AM NOT RESPONSIBLE FOR ANY DAMAGE TO YOUR MACHINE IF YOU <em>CHOOSE</em> TO DO THIS</strong></p>

<p>  <em>If your write protect screw is already removed skip to step 6.</em>  One of the refurbished computers we used already so it&rsquo;s possible. You can check by starting at line 6 if you&rsquo;d like</p>

<ol>
<li> Turn off the computer.</li>
<li> Flip the computer over and remove all 13 screws from the bottom (there is one beind the sticker that reads, &ldquo;Warranty Void If Seal Is Broken&rdquo;).</li>
<li> Gently, unsnap the bottom of the case using your finger nails or a flathead screw driver.  These snaps should easily seperate so no need to force it.</li>
<li> Once the case is removed locate the write protect screw, which is number 7 in <a href="http://www.chromium.org/_/rsrc/1381990807648/chromium-os/developer-information-for-chrome-os-devices/acer-c720-chromebook/c720-chromebook-annotated-innards.png">this photo</a> and remove it.</li>
<li> Replace the bottom case, making sure it snaps back into place.  Now put back the 13 screws you removed.</li>
<li> Reboot the computer and press [CTRL + d].</li>
<li> Go into a shell terminal [CTRL + ALT + t] and then enter <code>shell</code>.</li>
<li> Finally enter <code>sudo -s set_gbb_flags.sh 0x00000489</code>.</li>
</ol>


<br>


<h4>Switching back to developer mode boot:</h4>

<ol>
<li> Boot into Chrome OS [CTRL + d]\ (You&rsquo;ll have like 3 seconds after starting the computer, so act fast.)</li>
<li> Open the command line via [CTRL + ALT + t] then <code>shell</code></li>
<li> Enter <code>sudo -s set_gbb_flags.sh 0x00000000</code></li>
</ol>


<br>


<h4>Revert back to Factory Settings:</h4>

<ol>
<li> Make sure you default boot into developer mode first (see above).</li>
<li> Run the Chrome OS recovery image (see below). This step isn&rsquo;t necessary, but I&rsquo;d play it safe to make sure the paritions are erased correctly.</li>
<li> After it reboots press [SPACE BAR] then wait for the screen to refresh and press [ENTER]</li>
</ol>


<br>


<h2>Trouble Shooting</h2>

<h4>Developer Mode:</h4>

<p>How the hell do I get into developer mode?
  1. Enter [ESC + REFRESH + POWER]
  2. On reboot your screen should read &ldquo;Chrome OS is missing or damaged&rdquo;
  3. Ignore it; it&rsquo;s lying. Enter [CTRL + d] then [ENTER]</p>

<br>


<h4>USB or SD card not working, prompt says device is &lsquo;read-only&rsquo;:</h4>

<ul>
<li>Likely the USB or SD card is not properly formatted</li>
<li>Use an application like Disk Utility on Macs to make sure the USB or SD card is formatted in FAT 32</li>
<li>If it is not erase and reformat the USB or SD card as FAT 32</li>
</ul>


<br>


<h4>Chrome OS is Damaged:</h4>

<ol>
<li> Download the <a href="https://chrome.google.com/webstore/detail/chromebook-recovery-utili/jndclpdbaamdhonoechobihbbiimdgai?hl=en">Chromebook Recovery Utility</a> app.
<strong>NOTE</strong> Google has two recovery utilties, but this is the only one that works.You will need to switch to <a href="https://www.google.com/chrome/browser/beta.html?platform=mac&amp;extra=betachannel">Chrome Beta</a> if you are using a Mac as your primary computer.</li>
<li> Create a new image of Chrome OS specific to your machine.  The model number is at the bottom of the scary screen you should see your machines model number.</li>
<li> After the Chromebook Recovery Utility is finished creating a recovery USB or SD simply plug it into the machine and let it do it&rsquo;s thing. It shouldn&rsquo;t take more than 5 minutes</li>
</ol>


<br>


<h4>Stuck in Ubunutu reboot:</h4>

<ol>
<li> Restart your computer</li>
<li> As soon as you see the screen with &ldquo;OS verification off&rdquo; press [CTRL + d]</li>
<li> Login as guest and open a shell with [CTRL + ALT + t] and enter <code>shell</code></li>
<li> Next enter <code>sudo -s set_gbb_flags.sh 0x00000000</code></li>
<li> Restart your computer and you will now stay on the &ldquo;OS verification off&rdquo;. From here switch to Ubuntu [CTRL + l] or Chrome OS [CTRL + d]</li>
</ol>


<br>


<h4>Stuck as a Guest in ChrUbuntu:</h4>

<ul>
<li>The source of this bug remains a mystery as of right now, but it is likely something went wrong with installing the patches for the Ubuntu OS.</li>
<li>To fix this you need to wipe your computer using the Chrome OS Recovery Image and reinstall ChrUbuntu.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[define_method vs method_missing]]></title>
    <link href="http://TSiege.github.io/blog/2014/05/11/method-missing/"/>
    <updated>2014-05-11T10:31:50-04:00</updated>
    <id>http://TSiege.github.io/blog/2014/05/11/method-missing</id>
    <content type="html"><![CDATA[<h2>The Dark Arts of Programming</h2>

<p>Before I delve into the differences between define_method and method_missing, I want to quickly talk about metaprogramming in general.  Metaprogramming is, at a most basic level, code that writes code.  This is powerful, but also potentially dangerous.  You could easily write a meta-method that will overwrite an integral method and break your program, or create subtle edge cases that throw cryptic errors.  Metaprogramming tricks are clever, but clever code means difficult code to test. So with these warnings in mind let&rsquo;s carefully explore define_method and method_missing.</p>

<h2>Define_method</h2>

<p>Define_method is a way to dynamically define methods.</p>

<h3>How define_method Works</h3>

<p>Define_method is fairly straight forward. It accepts a method name as an argument and is passed a block to be the block of the new method. (If you want to make a method directly on whatever object you are calling use define_singleton_method in the same way.) Here&rsquo;s an example,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TestClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">make_instance_method</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="n">method_name</span><span class="o">.</span><span class="n">to_sym</span><span class="p">){</span><span class="nb">puts</span> <span class="s2">&quot;I&#39;m a instance method!&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_class</span> <span class="o">=</span> <span class="no">TestClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">test_class</span><span class="o">.</span><span class="n">test_method</span>  <span class="c1"># This method is not yet defined and will throw an error.</span>
</span><span class='line'>  <span class="c1">#=&gt; NoMethodError: undefined method `test_method&#39; for #&lt;TestClass:0x007fdd7ba0c1b0&gt;</span>
</span><span class='line'><span class="no">TestClass</span><span class="o">.</span><span class="n">make_instance_method</span><span class="p">(</span><span class="ss">:test_method</span><span class="p">)</span> <span class="c1"># I just defined the method.</span>
</span><span class='line'><span class="n">test_class</span><span class="o">.</span><span class="n">test_method</span> <span class="c1"># Now when I call it...</span>
</span><span class='line'>  <span class="c1">#=&gt; &quot;I&#39;m a instance method!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>When to use define_method:</h3>

<p>The ideal time to use this method is to define many, similar methods for an object. (By many, like ten or more.)</p>

<h3>The Dangers of define_method</h3>

<p>The reason to use it infrequently is that you have to be certain the reward of fewer, opaquer code is worth the risk of overwriting a vital method and then having to debug it.</p>

<p>The code below is an example from the code base of a project I am working on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TempReadings</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">METRICS</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:min</span><span class="p">,</span> <span class="ss">:max</span><span class="p">,</span> <span class="ss">:avg</span><span class="o">]</span>    <span class="c1">#these are the constants whose arrays have </span>
</span><span class='line'>  <span class="no">CYCLES</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:day</span><span class="p">,</span> <span class="ss">:night</span><span class="o">]</span>         <span class="c1">#different parts of the method names in them.</span>
</span><span class='line'>  <span class="no">MEASUREMENTS</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:temp</span><span class="p">,</span> <span class="ss">:outdoor_temp</span><span class="o">]</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">metric_cycle_measures</span><span class="p">(</span><span class="n">metrics</span><span class="p">,</span> <span class="n">cycles</span><span class="p">,</span> <span class="n">measurements</span><span class="p">)</span>
</span><span class='line'>    <span class="n">metrics</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">metric</span><span class="o">|</span>
</span><span class='line'>      <span class="n">cycles</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">cycle</span><span class="o">|</span>
</span><span class='line'>        <span class="n">measurements</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">measurement</span><span class="o">|</span>
</span><span class='line'>          <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">metric</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="n">cycle</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="n">measurement</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">array</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_cycle_</span><span class="si">#{</span><span class="n">measurement</span><span class="si">}</span><span class="s2">s&quot;</span><span class="p">,</span> <span class="n">cycle</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">metric</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above is arguably unnecessary since it is only twelve methods wrapped into one. But we could also write this with method_missing, but it is also arguably unnecessary.</p>

<h2>Method_missing</h2>

<p>Method_missing is not a way to define a method, but, rather, a way to catch undefined methods that you would have liked to be defined.  The best way to use it is to respond to unknown method calls that are in some way predictable.  Think of column names being methods in ActiveRecord.</p>

<p>In the code above I know that the method name is a combination of a set number of words. I can refactor the code above by checking if a method is some combination of those names and respond accordingly. Here&rsquo;s what it looks like,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TempReadings</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">name_keywords</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(min|max|avg)_(day|night)_(temp|outdoor_temp)/</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">name_keywords</span>
</span><span class='line'>      <span class="n">array</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;get_cycle_</span><span class="si">#{</span><span class="n">name_keywords</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="si">}</span><span class="s2">s&quot;</span><span class="p">,</span> <span class="n">name_keywords</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">name_keywords</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span> <span class="c1">#sends the failing method up the method look up chain.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How method_missing Works</h3>

<p>The code above duck punches the method_missing method for the class TempReadings.  It creates a MatchData object from the name passed as an argument.  If the name matches my regex expression it will then use the MatchData object to create methods on the fly to act accordingly.</p>

<h3>The Dangers of method_missing</h3>

<p>This can be dangerous because if you leave out super to continue the possibly unknown method up the look up chain known methods won&rsquo;t work.  Conversely, you could catch unknown methods that you would want to throw errors that would instead work with unforeseen consequences. It could also catch methods higher up the chain and duck punch them similarly to define_method.</p>

<h3>When to use method_missing</h3>

<p>Method_missing is really meant to be used when you are unclear of the method names.  This is rarely the case if it is ever your own project; instead it is often used in Ruby libraries or gems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Tech Interview Cheat Sheet]]></title>
    <link href="http://TSiege.github.io/blog/2014/05/02/tech-interview-cheat-sheet/"/>
    <updated>2014-05-02T19:39:02-04:00</updated>
    <id>http://TSiege.github.io/blog/2014/05/02/tech-interview-cheat-sheet</id>
    <content type="html"><![CDATA[<h2>Studying for a Tech Interview Sucks, so Here&rsquo;s a Cheat Sheet to Help</h2>

<p>This list is meant to be a both a quick guide and reference for further research into these topics.  It&rsquo;s basically a summary of that comp sci course you never took or forgot about, so there&rsquo;s no way it can cover everything in depth.  It also will be available as a <a href="https://gist.github.com/TSiege/cbb0507082bb18ff7e4b">gist</a> on Github for everyone to edit and add to.</p>

<h2>Data Structure Basics</h2>

<h3><strong>Array</strong></h3>

<h4>Definition:</h4>

<ul>
<li>Stores data elements based on an sequential, most commonly 0 based, index.</li>
<li>Based on <a href="http://en.wikipedia.org/wiki/Tuple">tuples</a> from set theory.</li>
<li>They are one of the oldest, most commonly used data structures.</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>Optimal for indexing; bad at searching, inserting, and deleting (except at the end).</li>
<li><strong>Linear arrays</strong>, or one dimensional arrays, are the most basic.

<ul>
<li>Are static in size, meaning that they are declared with a fixed size.</li>
</ul>
</li>
<li><strong>Dynamic arrays</strong> are like one dimensional arrays, but have reserved space for additional elements.

<ul>
<li>If a dynamic array is full, it copies it&rsquo;s contents to a larger array.</li>
</ul>
</li>
<li><strong>Two dimensional arrays</strong> have x and y indices like a grid or nested arrays.</li>
</ul>


<h4>Big O efficiency:</h4>

<ul>
<li>Indexing:         Linear array: O(1),      Dynamic array: O(1)</li>
<li>Search:           Linear array: O(n),      Dynamic array: O(n)</li>
<li>Optimized Search: Linear array: O(log n), Dynamic array: O(log n)</li>
<li>Insertion:        Linear array: n/a        Dynamic array: O(n)</li>
</ul>


<h3><strong>Linked List</strong></h3>

<h4>Definition:</h4>

<ul>
<li>Stores data with <strong>nodes</strong> that point to other nodes.

<ul>
<li>Nodes, at its most basic it has one datum and one reference (another node).</li>
<li>A linked list <em>chains</em> nodes together by pointing one node&rsquo;s reference towards another node.</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>Designed to optimize insertion and deletion, slow at indexing and searching.</li>
<li><strong>Doubly linked list</strong> has nodes that reference the previous node.</li>
<li><strong>Circularly linked list</strong> is simple linked list whose <strong>tail</strong>, the last node, references the <strong>head</strong>, the first node.</li>
<li><strong>Stack</strong>, commonly implemented with linked lists but can be made from arrays too.

<ul>
<li>Stacks are <strong>last in, first out</strong> (LIFO) data structures.</li>
<li>Made with a linked list by having the head be the only place for insertion and removal.</li>
</ul>
</li>
<li><strong>Queues</strong>, too can be implemented with a linked list or an array.

<ul>
<li>Queues are a <strong>first in, first out</strong> (FIFO) data structure.</li>
<li>Made with a doubly linked list that only removes from head and adds to tail.</li>
</ul>
</li>
</ul>


<h4>Big O efficiency:</h4>

<ul>
<li>Indexing:         Linked Lists: O(n)</li>
<li>Search:           Linked Lists: O(n)</li>
<li>Optimized Search: Linked Lists: O(n)</li>
<li>Insertion:        Linked Lists: O(1)</li>
</ul>


<h3><strong>Hash Table or Hash Map</strong></h3>

<h4>Definition:</h4>

<ul>
<li>Stores data with key value pairs.</li>
<li><strong>Hash functions</strong> accept a key and return an output unique only to that specific key.

<ul>
<li>This is known as <strong>hashing</strong>, which is the concept that an input and an output have a one-to-one correspondence to map information.</li>
<li>Hash functions return a unique address in memory for that data.</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>Designed to optimize searching, insertion, and deletion.</li>
<li><strong>Hash collisions</strong> are when a hash function returns the same output for two distinct outputs.

<ul>
<li>All hash functions have this problem.</li>
<li>This is often accommodated for by having the hash tables be very large.</li>
</ul>
</li>
<li>Hashes are important for associative arrays and database indexing.</li>
</ul>


<h4>Big O efficiency:</h4>

<ul>
<li>Indexing:         Hash Tables: O(1)</li>
<li>Search:           Hash Tables: O(1)</li>
<li>Insertion:        Hash Tables: O(1)</li>
</ul>


<h3><strong>Binary Tree</strong></h3>

<h4>Definition:</h4>

<ul>
<li>Is a tree like data structure where every node has at most two children.

<ul>
<li>There is one left and right child node.</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>Designed to optimize searching and sorting.</li>
<li>A <strong>degenerate tree</strong> is an unbalanced tree, which if entirely one-sided is a essentially a linked list.</li>
<li>They are comparably simple to implement than other data structures.</li>
<li>Used to make <strong>binary search trees</strong>.

<ul>
<li>A binary tree that uses comparable keys to assign which direction a child is.</li>
<li>Left child has a key smaller than it&rsquo;s parent node.</li>
<li>Right child has a key greater than it&rsquo;s parent node.</li>
<li>There can be no duplicate node.</li>
<li>Because of the above it is more likely to be used as a data structure than a binary tree.</li>
</ul>
</li>
</ul>


<h4>Big O efficiency:</h4>

<ul>
<li>Indexing:  Binary Search Tree: O(log n)</li>
<li>Search:    Binary Search Tree: O(log n)</li>
<li>Insertion: Binary Search Tree: O(log n)</li>
</ul>


<h2>Search Basics</h2>

<h3><strong>Breadth First Search</strong></h3>

<h4>Definition:</h4>

<ul>
<li>An algorithm that searches a tree (or graph) by searching levels of the tree first, starting at the root.

<ul>
<li>It finds every node on the same level, most often moving left to right.</li>
<li>While doing this it tracks the children nodes of the nodes on the current level.</li>
<li>When finished examining a level it moves to the left most node on the next level.</li>
<li>The bottom-right most node is evaluated last (the node that is deepest and is farthest right of it&rsquo;s level).</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>Optimal for searching a tree that is wider than it is deep.</li>
<li>Uses a queue to store information about the tree while it traverses a tree.

<ul>
<li>Because it uses a queue it is more memory intensive than <strong>depth first search</strong>.</li>
<li>The queue uses more memory because it needs to stores pointers</li>
</ul>
</li>
</ul>


<h4>Big O efficiency:</h4>

<ul>
<li>Search: Breadth First Search: O(|E| + |V|)</li>
<li>E is number of edges</li>
<li>V is number of vertices</li>
</ul>


<h3><strong>Depth First Search</strong></h3>

<h4>Definition:</h4>

<ul>
<li>An algorithm that searches a tree (or graph) by searching depth of the tree first, starting at the root.

<ul>
<li>It traverses left down a tree until it cannot go further.</li>
<li>Once it reaches the end of a branch it traverses back up trying the right child of nodes on that branch, and if possible left from the right children.</li>
<li>When finished examining a branch it moves to the node right of the root then tries to go left on all it&rsquo;s children until it reaches the bottom.</li>
<li>The right most node is evaluated last (the node that is right of all it&rsquo;s ancestors).</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>Optimal for searching a tree that is deeper than it is wide.</li>
<li>Uses a stack to push nodes onto.

<ul>
<li>Because a stack is LIFO it does not need to keep track of the nodes pointers and is therefore less memory intensive than breadth first search.</li>
<li>Once it cannot go further left it begins evaluating the stack.</li>
</ul>
</li>
</ul>


<h4>Big O efficiency:</h4>

<ul>
<li>Search: Depth First Search: O(|E| + |V|)</li>
<li>E is number of edges</li>
<li>V is number of vertices</li>
</ul>


<h4>Breadth First Search Vs. Depth First Search</h4>

<ul>
<li>The simple answer to this question is that it depends on the size and shape of the tree.

<ul>
<li>For wide, shallow trees use Breadth First Search</li>
<li>For deep, narrow trees use Depth First Search</li>
</ul>
</li>
</ul>


<h4>Nuances:</h4>

<ul>
<li>Because BFS uses queues to store information about the nodes and its children, it could use more memory than is available on your computer.  (But you probably won&rsquo;t have to worry about this.)</li>
<li>If using a DFS on a tree that is very deep you might go unnecessarily deep in the search. See <a href="http://xkcd.com/761/">xkcd</a> for more information.</li>
<li>Breadth First Search tends to be a looping algorithm.</li>
<li>Depth First Search tends to be a recursive algorithm.</li>
</ul>


<h2>Efficient Sorting Basics</h2>

<h3><strong>Merge Sort</strong></h3>

<h4>Definition:</h4>

<ul>
<li>A comparison based sorting algorithm

<ul>
<li>Divides entire dataset into groups of at most two.</li>
<li>Compares each number one at a time, moving the smallest number to left of the pair.</li>
<li>Once all pairs sorted it then compares left most elements of the two leftmost pairs creating a sorted group of four with the smallest numbers on the left and the largest ones on the right.</li>
<li>This process is repeated until there is only one set.</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>This is one of the most basic sorting algorithms.</li>
<li>Know that it divides all the data into as small possible sets then compares them.</li>
</ul>


<h4>Big O efficiency:</h4>

<ul>
<li>Best Case Sort: Merge Sort: O(n)</li>
<li>Average Case Sort: Merge Sort: O(n log n)</li>
<li>Worst Case Sort: Merge Sort: O(n log n)</li>
</ul>


<h3><strong>Quicksort</strong></h3>

<h4>Definition:</h4>

<ul>
<li>A comparison based sorting algorithm

<ul>
<li>Divides entire dataset in half by selecting the average element and putting all smaller elements to the left of the average.</li>
<li>It repeats this process on the left side until it is comparing only two elements at which point the left side is sorted.</li>
<li>When the left side is finished sorting it performs the same operation on the right side.</li>
</ul>
</li>
<li>Computer architecture favors the quicksort process.</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>While it has the same Big O as (or worse in some cases) many other sorting algorithms it is often faster in practice than many other sorting algorithms, such as merge sort.</li>
<li>Know that it halves the data set by the average continuously until all the information is sorted.</li>
</ul>


<h4>Big O efficiency:</h4>

<ul>
<li>Best Case Sort: Merge Sort: O(n)</li>
<li>Average Case Sort: Merge Sort: O(n log n)</li>
<li>Worst Case Sort: Merge Sort: O(n<sup>2</sup>)</li>
</ul>


<h3><strong>Bubble Sort</strong></h3>

<h4>Definition:</h4>

<ul>
<li>A comparison based sorting algorithm

<ul>
<li>It iterates left to right comparing every couplet, moving the smaller element to the left.</li>
<li>It repeats this process until it no longer moves and element to the left.</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>While it is very simple to implement, it is the least efficient of these three sorting methods.</li>
<li>Know that it moves one space to the right comparing two elements at a time and moving the smaller on to left.</li>
</ul>


<h4>Big O efficiency:</h4>

<ul>
<li>Best Case Sort: Merge Sort: O(n)</li>
<li>Average Case Sort: Merge Sort: O(n<sup>2</sup>)</li>
<li>Worst Case Sort: Merge Sort: O(n<sup>2</sup>)</li>
</ul>


<h4>Merge Sort Vs. Quicksort</h4>

<ul>
<li>Quicksort is likely faster in practice.</li>
<li>Merge Sort divides the set into the smallest possible groups immediately then reconstructs the incrementally as it sorts the groupings.</li>
<li>Quicksort continually divides the set by the average, until the set is recursively sorted.</li>
</ul>


<h2>Basic Types of Algorithms</h2>

<h3><strong>Recursive Algorithms</strong></h3>

<h4>Definition:</h4>

<ul>
<li>An algorithm that calls itself in its definition.

<ul>
<li><strong>Recursive case</strong> a conditional statement that is used to trigger the recursion.</li>
<li><strong>Base case</strong> a conditional statement that is used to break the recursion.</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li><strong>Stack level too deep</strong> and <strong>stack overflow</strong>.

<ul>
<li>If you&rsquo;ve seen either of these from a recursive algorithm, you messed up.</li>
<li>It means that your base case was never triggered because it was faulty or the problem was so massive you ran out of RAM before reaching it.</li>
<li>Knowing whether or not you will reach a base case is integral to correctly using recursion.</li>
<li>Often used in Depth First Search</li>
</ul>
</li>
</ul>


<h3><strong>Iterative Algorithms</strong></h3>

<h4>Definition:</h4>

<ul>
<li>An algorithm that is called repeatedly but for a finite number of times, each time being a single iteration.

<ul>
<li>Often used to move incrementally through a data set.</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>Generally you will see iteration as loops, for, while, and until statements.</li>
<li>Think of iteration as moving one at a time through a set.</li>
<li>Often used to move through an array.</li>
</ul>


<h4>Recursion Vs. Iteration</h4>

<ul>
<li>The differences between recursion and iteration can be confusing to distinguish since both can be used to implement the other. But know that,

<ul>
<li>Recursion is, usually, more expressive and easier to implement.</li>
<li>Iteration uses less memory.</li>
</ul>
</li>
<li><strong>Functional languages</strong> tend to use recursion. (i.e. Haskell)</li>
<li><strong>Imperative languages</strong> tend to use iteration. (i.e. Ruby)</li>
<li>Check out this <a href="http://stackoverflow.com/questions/19794739/what-is-the-difference-between-iteration-and-recursion">Stack Overflow post</a> for more info.</li>
</ul>


<h4>Pseudo Code of Moving Through an Array (this is why iteration is used for this)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Recursion                         | Iteration
</span><span class='line'>----------------------------------|----------------------------------
</span><span class='line'>recursive method (array, n)       | iterative method (array)
</span><span class='line'>  if array[n] is not nil          |   for n from 0 to size of array
</span><span class='line'>    print array[n]                |     print(array[n])
</span><span class='line'>    recursive method(array, n+1)  |
</span><span class='line'>  else                            |
</span><span class='line'>    exit loop                     |</span></code></pre></td></tr></table></div></figure>


<h3><strong>Greedy Algorithm</strong></h3>

<h4>Definition:</h4>

<ul>
<li>An algorithm that, while executing, selects only the information that meets a certain criteria.</li>
<li>The general five components, taken from <a href="http://en.wikipedia.org/wiki/Greedy_algorithm#Specifics">Wikipedia</a>:

<ul>
<li>A candidate set, from which a solution is created.</li>
<li>A selection function, which chooses the best candidate to be added to the solution.</li>
<li>A feasibility function, that is used to determine if a candidate can be used to contribute to a solution.</li>
<li>An objective function, which assigns a value to a solution, or a partial solution.</li>
<li>A solution function, which will indicate when we have discovered a complete solution.</li>
</ul>
</li>
</ul>


<h4>What you need to know:</h4>

<ul>
<li>Used to find the optimal solution for a given problem.</li>
<li>Generally used on sets of data where only a small proportion of the information evaluated meets the desired result.</li>
<li>Often a greedy algorithm can help reduce the Big O of an algorithm.</li>
</ul>


<h4>Pseudo Code of a Greedy Algorithm to Find Largest Difference of any Two Numbers in an Array.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>greedy algorithm (array)
</span><span class='line'>  var largest difference = 0
</span><span class='line'>  var new difference = find next difference (array[n], array[n+1])
</span><span class='line'>  largest difference = new difference if new difference is &gt; largest difference
</span><span class='line'>  repeat above two steps until all differences have been found
</span><span class='line'>  return largest difference</span></code></pre></td></tr></table></div></figure>


<p>This algorithm never needed to compare all the differences to one another, saving it an entire iteration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips on Customizing Octopress]]></title>
    <link href="http://TSiege.github.io/blog/2014/04/27/tips-on-setting-up-octopress/"/>
    <updated>2014-04-27T14:55:38-04:00</updated>
    <id>http://TSiege.github.io/blog/2014/04/27/tips-on-setting-up-octopress</id>
    <content type="html"><![CDATA[<h3>So you&rsquo;re lost on setting up an octopress blog.</h3>

<hr>


<p>Having had just made my own Octopress Blog, I can safely say there are some things I wish were clearer about setting one up. So that&rsquo;s what this blog post is about! This post <i>isn&rsquo;t</i> about how to make a Octopress blog, for that you should go to <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a> and follow the other tutorials to get the basics going. Rather this is about some pointers on how Octopress works and how to customize some things.</p>

<h3>Getting a better theme.</h3>

<hr>


<p>While Octopress is great it ain&rsquo;t too pretty.  After running <code>rake setup_github_pages</code>, which sets up your url and the correct branch for your repo, it is a good time to get a new theme.  <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">This</a> will help you find an awesome theme built specifically for Octopress all come with site previews as well as the necessary steps to using their theme. Here are the generic steps for your command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ git clone GIT_URL .themes/THEME_NAME
</span><span class='line'>$ rake install['THEME_NAME']
</span><span class='line'>$ rake generate</span></code></pre></td></tr></table></div></figure>


<h3>Customizing your style sheets.</h3>

<hr>


<p>Octopress can be a little confusing since it has many duplicate files and directories.  But all the changes you&rsquo;ll need to make are going to be in <code>sass/</code> directory on the top level of Octopress.  In that directory will be a <code>custom/</code> folder that contains <code>_styles.scss</code> file.  That file is where all your complex custom css or sass will go.  For example, if you want to change a default color that your theme uses, change its value in the <code>_color.css</code> file in the same <code>custom/</code> directory.</p>

<p>The way Octopress works is that it will require <code>sass/screen.scss</code>, which in turn requires partials on the top level of the <code>sass/</code> directory, which those partials compile the styles of each other directory in <code>sass/</code>.  The style sheets in <code>custom/</code> are compiled last and <code>custom/_styles.scss</code> is the last of last, letting its styling override all others.</p>

<p>For more about customizing your style sheets see <a href="http://octopress.org/docs/theme/styles/">http://octopress.org/docs/theme/styles/</a></p>

<h3>Getting Font Awesome</h3>

<hr>


<p>Skip this if Font Awesome works with your theme.</p>

<p>Font Awesome lives up to its name, but getting it into your Octopress blog can be a pain, but luckily I&rsquo;ve found a great <a href="http://infectiouscoding.com/blog/2013/09/04/add-font-awesome-to-octopress/">blog</a> that helped. Here&rsquo;s the gist:<br>
1) Download and unzip <a href="http://fortawesome.github.io/Font-Awesome/">Font Awesome</a>.<br>
2) If you don&rsquo;t have a <code>sass/font-awesome/</code> folder then create one and move the <code>scss/</code> folder from the Font Awesome package you just downloaded into <code>sass/font-awesome/</code>. This will create a dir tree that looks like <code>sass/font-awesome/scss/</code>.<br>
3) Finish up in <code>sass/font-awesome/scss/</code> by adding this line, <code>@import "font-awesome/scss/font-awesome.scss"</code>, to <code>screen.scss</code> in the top level of <code>sass/</code>.<br>
4) Next move the <code>font/</code> from the Font Awesome package to <code>source/font/</code> if it isn&rsquo;t there create it.  If it is and contains Font Awesome files delete those files and replace them with the new ones.  You&rsquo;ll end up with a dir tree that looks like <code>source/font/</code>.<br></p>

<p>Font Awesome should be good to go now.</p>

<h3>Setting Up Your Layouts</h3>

<hr>


<p>For almost anything else you&rsquo;d want to do with Octopress you&rsquo;ll be in <code>source/</code>, which is the top directory of your Octopress blog.  When you run <code>rake new_post["title"]</code> it will create your markdown file here in <code>source/_posts/</code>.  With Octopress your pages use something like what&rsquo;s shown below to create their complete layout.  It&rsquo;s kind of like in Rails when a block of html yields to a partial to render another part of a page.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ---
</span><span class='line'>  layout: default
</span><span class='line'>  title: Blog Archives
</span><span class='line'>  ---</span></code></pre></td></tr></table></div></figure>


<p>In <code>_layouts/</code> you&rsquo;ll be able to make your own if you want. These layouts often require partials from <code>_inlcudes/</code>.  Once you finish making your own layout add <code>layout: some_custom_layout</code> to your page.</p>

<p>For more of what you can do in <code>source/</code> check out <a href="http://octopress.org/docs/theme/template/">http://octopress.org/docs/theme/template/</a></p>

<h3>Getting a New Favicon</h3>

<hr>


<p>Getting a new favicon for your blog isn&rsquo;t too hard; there are just several favicon.pngs floating around the octopress blog.  But the real favicon, or at least the one which is actually used by octopress is in the top level of <code>source/</code>.  I simply deleted this favicon and replaced it with my own.  Next to make sure it is properly being required by the head of your blog&rsquo;s page.  In <code>source/_includes/head.html</code> is the line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;/favicon.ico&quot;</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure the <code>favicon.ico</code> part is the exact same name as your favicon on the top level of <code>source/</code> and you should be good to go.</p>

<p>- If you change the favicon and don&rsquo;t see it, try clearing your browser&rsquo;s cache in order to properly update the blog&rsquo;s styling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devise, Read its Documentation, Then Conquer]]></title>
    <link href="http://TSiege.github.io/blog/2014/03/20/devise/"/>
    <updated>2014-03-20T15:15:59-04:00</updated>
    <id>http://TSiege.github.io/blog/2014/03/20/devise</id>
    <content type="html"><![CDATA[<p>This past weekend I implemented devise with my partner for a project we were working on.  The project was going well but for our rails app we wanted to use sessions to build out functionality. It felt like the logical step once we hit a wall with the back end and didn’t know where else to go.  A fellow student recommended the gem Devise.  We were hesitant but it sounded like the easiest way to implement sessions, which we had no experience doing in Rails.</p>

<p>So we found a Rail’s Girls Guide on Devise, skipped to the part to where we implemented it and took off from there.  Within two minutes we had successfully installed Devise and broke everything in our app.  It was so simple though!</p>

<p>We had added Devise to our gem files, ran <code>bundle install</code> in our shell and then to actually install Devise in our application we ran <code>rails g devise:install</code>  We wanted our users to have sessions so we added</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">default_url_options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s1">&#39;localhost:3000&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>to our development.rb file in the config/environment directory.  Then we ran the two commands that really broke everything <code>rails g devise user</code> and <code>rake db:migrate</code> (in that order).  At the time we were at such a loss as to why the forms we had made weren’t being used anymore, why we had new, unexpected routes, how our controller was being glossed over, and why we couldn’t see any of those things in our code.</p>

<p>While overall, I was happy about using Devise, this was one of the things that annoyed me about the gem.  Devise is huge, which it has to be to provide the security features it sets up, however Devise tries to hide its hugeness from you.  While hiding some of its magic on how it works is fine, not showing a developer the new views it uses by default is not.  At this point in the night however we called it a day and went home.</p>

<p>The next morning I sat down and was determined to get Devise to work.  I started out where we should have, at Devise’s documentation.  The documentation is good and straight forward.  First thing I did was run <code>rails generate devise:views</code> so that I could actually work our forms into Devise.  Next to make our code work I added this code below to our parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">configure_permitted_parameters</span>
</span><span class='line'>  <span class="n">devise_parameter_sanitizer</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="ss">:sign_up</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="ss">:first_name</span> <span class="o">&lt;&lt;</span><span class="ss">:etc</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I found trying to get Devise’s controller to switch back to our own to be too difficult, and I realized I needed to work with devise rather than against it.  And with Devise I could do this awesome code to our site’s navbar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="n">current_user</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= link_to &#39;Home&#39;, user_path(current_user), class: &#39;navbar-brand&#39; %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= link_to &#39;Settings&#39;, edit_user_registration_path, class: &#39;navbar-brand&#39; %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Logout&quot;</span><span class="p">,</span> <span class="n">destroy_user_session_path</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;navbar-brand&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;logout-id&#39;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% else %&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Login&quot;</span><span class="p">,</span> <span class="s2">&quot;/users/sign_in&quot;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;navbar-brand&#39;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This current_user method let’s make a page layout responsive to logged in user, or someone just visiting our page.  It adds great functionality to the site and simple to expand on.</p>

<p>So remember, before you implement any code in whatever language, be sure to read its documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Migrations, which is what exactly?]]></title>
    <link href="http://TSiege.github.io/blog/2014/03/06/database-migrations/"/>
    <updated>2014-03-06T14:03:28-05:00</updated>
    <id>http://TSiege.github.io/blog/2014/03/06/database-migrations</id>
    <content type="html"><![CDATA[<p>I’m into my third week of Flatiron School’s Ruby Class, and I’ve hit a snag with databases.  No, not the deceptively complex nature and syntax of relational databases, which I’m 70% sure I kind of understand.  What I’m confused about is what exactly is a database migration.  What is being migrated? Schema? Data? Schema and data?</p>

<p>The vague answer is that it depends.  This week we have learned only about database migrations involving the schema.  The schema is the way the layout that data is stored in; it consists of tables, columns, and rows as well as the ways that those tables relate to one another.  If we want to change the schema we use a database migration.  This can happen in development, testing, or production when either a developer isn’t sure what the schema should be or if he or she wants to change the schema later on to add or drop a feature.  This is what we’ve been doing in class so far.</p>

<p>This isn’t to say that a migration, meant to update the schema, can’t also move the data to the new format. It certainly can.  If a migration occurs while there is data in the database the ORM, such as ActiveRecord or Sequel, will update the data within in the database to match the new schema.  Thanks ORMs!</p>

<p>That brings us to the last case, moving just data.  This is known as a legacy migration. It isn’t related so much to a change in schema as much as it is to move the information of database into a new database written in a different language or an updated version of the language it was currently written in.  It sounds similar but is a more drastic change than what we were experimenting in class with.</p>

<p>We’ve been using migrations to update smaller changes in our schema, reversible changes at that. Our changes to the schema were along the lines of adding new features to a website or dropping old ones.  We use an ORM to do this.  ActiveRecord has a way of time stamping these migrations so that we can decide to revert back to changes we’ve previously made kind of like we do when we use Git.</p>

<p>This lead to one more question, why the hell aren’t we using Git!?  It’s complicated sure, but at least I already learned that! Right? Well no…  I’m very wrong for wanting to use Git instead of ActiveRecord.  Git is version control where as AR acts like more of a backup tool.  Where I get confused is that AR’s ability to roll back migrations feels like version control.  The reason it feels this way is that I have so far only used an ORM to change schema for empty databases.  If I never had to add data to my database I could use Git, which would be perfect if I never wanted to use my database!</p>

<p>AR and other ORMs do a much better job at changes to the data than Git can.  Git will get easily confused by changes made to the data within the database and won’t know how to merge changes in the data within those files.  This could happen even if the schema isn’t changed, just the data within it.  Git will then give you merge conflicts that will be practically impossible to solve, and frankly conflicts we never wanted in the first place; we expect our data to change.  That’s an important feature of ORMs like AR, and why we use them to manage the changes to our schema and moving our data into the new schema.  That and ORMs make working with databases a breeze since they allow us to handle data with a language as awesome as Ruby.</p>

<p><a href="" title="http://guides.rubyonrails.org/migrations.html">ActiveRecord and Rails</a>
<a href="" title="http://stackoverflow.com/a/5801140/3023931">Git vs. ActiveRecord</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Way of the Donkey]]></title>
    <link href="http://TSiege.github.io/blog/2014/02/20/the-way-of-the-donkey/"/>
    <updated>2014-02-20T13:42:20-05:00</updated>
    <id>http://TSiege.github.io/blog/2014/02/20/the-way-of-the-donkey</id>
    <content type="html"><![CDATA[<p>Almost everyday my dad and I have a routine where we exchange headlines and excerpts of articles from the Times.  Mostly we’ve read all the same articles and we butt heads about whatever the implications are.  But that day in November he had told me about the possible extinction of a breed of donkeys native to mountains of Portugal and Spain.  “No one uses donkeys anymore; they all have tractors. And everyone is emigrating to the cities.”</p>

<p>He went on to say to tell me how EU subsidizes farmers to keep their donkeys but that now the farmers, who still pay more to care for their donkeys than they receive in subsidies, are retiring and can’t care for them much longer.  It seems that the donkeys are inevitably turning from a relic into a memory of a pre-digital age.  I felt the same way.</p>

<p>For months prior I had toyed with the idea of going to grad-school.  I was directionless.  I had toyed with the idea of becoming a history professor; the idea of spending my days teaching and exploring my esoteric interests seemed like an amazing direction to take my life.  However, I had worked with people who had doctorates and masters in related fields, and they didn’t seem to be having the life I had expected them to live.  Not that they weren’t happy, but it was clear that life in academia wasn’t what I had thought it to be.  I was worried my arcane interests would lead me down the road of the donkey.  The digital age is in full swing and only accelerating, I didn’t want to further isolate myself by focusing on the past while the present moved on.</p>

<p>The further I advanced in the application process the more I wanted to stop, but I didn’t know where to go instead.  I had toyed with the idea of several other fields, all of which I had little to no experience in.  Finally one day I decided to delve deeper into my curiosity about coding.  I was always intimidated by it.  I have never done more than play around with free online tutorials with HTML and CSS.  During them I had been convinced I was capable of doing this.  Then I’d try to make my own website, and I’d suddenly feel that confidence disappear.  “I can’t do this,” I’d think.</p>

<p>I had always had the misconception that’s coding was somehow beyond me, somehow otherworldly.  To program was to speak computer.  Then I heard about the Flatiron School and Ruby.  I school to teaching programming to the non-programmers in a language so semantic anyone who had the passion to learn and the patience to teach it to themselves could pick up.  I read everything I could find about the school and got in touch with an alumnus.  I visited the school’s meet ups every Thursday night for weeks by the time I decided to apply.  The school wasn’t selling snake oil, it was giving it’s students the environment and programming expertise to learn something practical and doable.  I see it and feel it.</p>

<p>By that time I had delved into Ruby with Chris Pine’s Learn to Program, and it was clear that while I was having my computer run basic programs I wasn’t speaking computer.  Ruby was created to be a language of description as well as expression, meaning it’s actions were powerful but clear to any person who read it.  It’s syntax and keywords sat on my screen colored neon pink and blue with the strings, words wrapped in quotation marks, a pale yellow.  These contrasted with the slate grey of my text editor Sublime Text 2, and I felt like I was really doing something with myself.</p>

<p>I didn’t know everything about Ruby, but bits and pieces of it were beginning to make sense to me.  It was slow going, but it wasn’t a dense cluster of indecipherable characters that I had imagined only people with super human thinking could translate and tabulate into meaning.</p>

<p>A few weeks later I had found out I was accepted into the Flatiron School.  I was ecstatic.  Soon I thought the wall I had hit in teaching myself to code would be become easier to climb over, as teachers would guide me in doing so.  It has only been two weeks since I began, and I am still amazed at how I much I had underestimated just how much the school could teach me in such a short amount of time.  I no longer feel like I could be one of those donkeys, surviving in isolation while the world moved on.</p>
]]></content>
  </entry>
  
</feed>
