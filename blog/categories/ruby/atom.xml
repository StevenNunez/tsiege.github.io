<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Ready or Blog Here I Code]]></title>
  <link href="http://TSiege.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://TSiege.github.io/"/>
  <updated>2014-09-05T16:22:23-04:00</updated>
  <id>http://TSiege.github.io/</id>
  <author>
    <name><![CDATA[Tristan Siegel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[define_method vs method_missing]]></title>
    <link href="http://TSiege.github.io/blog/2014/05/11/method-missing/"/>
    <updated>2014-05-11T10:31:50-04:00</updated>
    <id>http://TSiege.github.io/blog/2014/05/11/method-missing</id>
    <content type="html"><![CDATA[<h2>The Dark Arts of Programming</h2>

<p>Before I delve into the differences between define_method and method_missing, I want to quickly talk about metaprogramming in general.  Metaprogramming is, at a most basic level, code that writes code.  This is powerful, but also potentially dangerous.  You could easily write a meta-method that will overwrite an integral method and break your program, or create subtle edge cases that throw cryptic errors.  Metaprogramming tricks are clever, but clever code means difficult code to test. So with these warnings in mind let&rsquo;s carefully explore define_method and method_missing.</p>

<h2>Define_method</h2>

<p>Define_method is a way to dynamically define methods.</p>

<h3>How define_method Works</h3>

<p>Define_method is fairly straight forward. It accepts a method name as an argument and is passed a block to be the block of the new method. (If you want to make a method directly on whatever object you are calling use define_singleton_method in the same way.) Here&rsquo;s an example,</p>

<p>```ruby
class TestClass
  def self.make_instance_method(method_name)</p>

<pre><code>define_method(method_name.to_sym){puts "I'm a instance method!"}
</code></pre>

<p>  end
end</p>

<p>test_class = TestClass.new
test_class.test_method  # This method is not yet defined and will throw an error.
  #=> NoMethodError: undefined method `test_method' for #&lt;TestClass:0x007fdd7ba0c1b0>
TestClass.make_instance_method(:test_method) # I just defined the method.
test_class.test_method # Now when I call it&hellip;
  #=> &ldquo;I&rsquo;m a instance method!&rdquo;
```</p>

<h3>When to use define_method:</h3>

<p>The ideal time to use this method is to define many, similar methods for an object. (By many, like ten or more.)</p>

<h3>The Dangers of define_method</h3>

<p>The reason to use it infrequently is that you have to be certain the reward of fewer, opaquer code is worth the risk of overwriting a vital method and then having to debug it.</p>

<p>The code below is an example from the code base of a project I am working on.</p>

<p>```ruby
class TempReadings</p>

<p>  METRICS = [:min, :max, :avg]    #these are the constants whose arrays have
  CYCLES = [:day, :night]         #different parts of the method names in them.
  MEASUREMENTS = [:temp, :outdoor_temp]
  &hellip;</p>

<p>  def metric_cycle_measures(metrics, cycles, measurements)</p>

<pre><code>metrics.each do |metric|
  cycles.each do |cycle|
    measurements.each do |measurement|
      define_method("#{metric}_#{cycle}_#{measurement}") do 
        array = self.send("get_cycle_#{measurement}s", cycle)
        self.send(metric, array)
      end
    end
  end
end
</code></pre>

<p>  end
end
```
The code above is arguably unnecessary since it is only twelve methods wrapped into one. But we could also write this with method_missing, but it is also arguably unnecessary.</p>

<h2>Method_missing</h2>

<p>Method_missing is not a way to define a method, but, rather, a way to catch undefined methods that you would have liked to be defined.  The best way to use it is to respond to unknown method calls that are in some way predictable.  Think of column names being methods in ActiveRecord.</p>

<p>In the code above I know that the method name is a combination of a set number of words. I can refactor the code above by checking if a method is some combination of those names and respond accordingly. Here&rsquo;s what it looks like,</p>

<p>```ruby
class TempReadings</p>

<p>  def method_missing(name, *args)</p>

<pre><code>name_keywords = name.to_s.match(/(min|max|avg)_(day|night)_(temp|outdoor_temp)/)
if name_keywords
  array = self.send("get_cycle_#{name_keywords[3]}s", name_keywords[2].to_sym)
  self.send(name_keywords[1].to_sym, array)
else
  super #sends the failing method up the method look up chain.
end
</code></pre>

<p>  end
end
```</p>

<h3>How method_missing Works</h3>

<p>The code above duck punches the method_missing method for the class TempReadings.  It creates a MatchData object from the name passed as an argument.  If the name matches my regex expression it will then use the MatchData object to create methods on the fly to act accordingly.</p>

<h3>The Dangers of method_missing</h3>

<p>This can be dangerous because if you leave out super to continue the possibly unknown method up the look up chain known methods won&rsquo;t work.  Conversely, you could catch unknown methods that you would want to throw errors that would instead work with unforeseen consequences. It could also catch methods higher up the chain and duck punch them similarly to define_method.</p>

<h3>When to use method_missing</h3>

<p>Method_missing is really meant to be used when you are unclear of the method names.  This is rarely the case if it is ever your own project; instead it is often used in Ruby libraries or gems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devise, Read its Documentation, Then Conquer]]></title>
    <link href="http://TSiege.github.io/blog/2014/03/20/devise/"/>
    <updated>2014-03-20T15:15:59-04:00</updated>
    <id>http://TSiege.github.io/blog/2014/03/20/devise</id>
    <content type="html"><![CDATA[<p>This past weekend I implemented devise with my partner for a project we were working on.  The project was going well but for our rails app we wanted to use sessions to build out functionality. It felt like the logical step once we hit a wall with the back end and didn’t know where else to go.  A fellow student recommended the gem Devise.  We were hesitant but it sounded like the easiest way to implement sessions, which we had no experience doing in Rails.</p>

<p>So we found a Rail’s Girls Guide on Devise, skipped to the part to where we implemented it and took off from there.  Within two minutes we had successfully installed Devise and broke everything in our app.  It was so simple though!</p>

<p>We had added Devise to our gem files, ran <code>bundle install</code> in our shell and then to actually install Devise in our application we ran <code>rails g devise:install</code>  We wanted our users to have sessions so we added
<code>ruby
config.action_mailer.default_url_options = { :host =&gt; 'localhost:3000' }
</code>
to our development.rb file in the config/environment directory.  Then we ran the two commands that really broke everything <code>rails g devise user</code> and <code>rake db:migrate</code> (in that order).  At the time we were at such a loss as to why the forms we had made weren’t being used anymore, why we had new, unexpected routes, how our controller was being glossed over, and why we couldn’t see any of those things in our code.</p>

<p>While overall, I was happy about using Devise, this was one of the things that annoyed me about the gem.  Devise is huge, which it has to be to provide the security features it sets up, however Devise tries to hide its hugeness from you.  While hiding some of its magic on how it works is fine, not showing a developer the new views it uses by default is not.  At this point in the night however we called it a day and went home.</p>

<p>The next morning I sat down and was determined to get Devise to work.  I started out where we should have, at Devise’s documentation.  The documentation is good and straight forward.  First thing I did was run <code>rails generate devise:views</code> so that I could actually work our forms into Devise.  Next to make our code work I added this code below to our parameters.
<code>ruby
def configure_permitted_parameters
  devise_parameter_sanitizer.for(:sign_up) &lt;&lt; :first_name &lt;&lt;:etc
end
</code>
I found trying to get Devise’s controller to switch back to our own to be too difficult, and I realized I needed to work with devise rather than against it.  And with Devise I could do this awesome code to our site’s navbar.
<code>ruby
&lt;% if current_user %&gt;
  &lt;%= link_to 'Home', user_path(current_user), class: 'navbar-brand' %&gt;
  &lt;%= link_to 'Settings', edit_user_registration_path, class: 'navbar-brand' %&gt;
  &lt;%= link_to "Logout", destroy_user_session_path, method: :delete, class: 'navbar-brand', id: 'logout-id' %&gt;
&lt;% else %&gt;
  &lt;%= link_to "Login", "/users/sign_in", class: 'navbar-brand' %&gt;
&lt;% end %&gt;
</code></p>

<p>This current_user method let’s make a page layout responsive to logged in user, or someone just visiting our page.  It adds great functionality to the site and simple to expand on.</p>

<p>So remember, before you implement any code in whatever language, be sure to read its documentation.</p>
]]></content>
  </entry>
  
</feed>
